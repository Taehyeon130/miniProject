<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
				  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- namespace
		현재.xml의 쿼리를 호출할 Mapper Class의 경로와 클래스 명으로 해야함
 -->

<mapper namespace = "com.project.blog.repository.BlogMapper">
	<!-- 등록하기 -->
	<insert id="insertBlog" parameterType="com.project.blog.domain.BlogDto" >
		insert into blog (
			b_id,
			b_title,
			b_author,
			b_content,
			b_show,
			b_search,
			b_cate,
			b_date,
			b_modDate,
			delYn
			) values(#{b_id},#{b_title}, #{b_author}, #{b_content}, #{b_show}, #{b_search}, #{b_cate},now(),now(),'N')
			<selectKey resultType="int" keyProperty="b_id" order="AFTER">
				select last_insert_id()
			</selectKey>

	</insert>

	<!-- 전체 select -->
	<select id="selectAllList" resultType="com.project.blog.domain.BlogDto" parameterType="com.project.blog.domain.SearchDto">
	select B.*
		from (
			select
				@row_num := @row_num + 1 as rn,
				b_id,
				b_title	,
				b_author ,
				b_content ,
				b_cate ,
				b_search ,
				b_show ,
				delYn ,
				b_date ,
				b_modDate
				from blog, (select @row_num := 0) TMP
				where delYn = 'N'
				<include refid="listSearchCondition"></include>
				order by b_date desc
			)B
			where
			1=1 and
 			<if test = "firstRecordIndex != null and lastRecordIndex != null">
				B.rn between #{firstRecordIndex} and #{lastRecordIndex}
			</if>


	</select>

	<!-- 하나만 삭제 -->
	<update id="deleteOne" parameterType="int">
		update blog set delYn = "Y" where b_id=#{b_id}
	</update>

	<!-- 선택삭제 -->
	<update id="deleteSelect" parameterType ="int">
		update blog set delYn = "Y" where b_id IN (
			<foreach collection="list" item="item" index="index" separator=",">
				#{item}
			</foreach>
		);
	</update>

	<!-- 상세보기 -->
	<select id="selectById" resultType="com.project.blog.domain.BlogDto" parameterType="int">
		select
			b.b_id,
			b.b_title,
			b.b_author,
			b.b_content,
			b.b_show,
			b.b_search,
			b.b_cate ,
			b.delYn,
			b.b_date,
			f.f_id,
			f.f_oriName,
			f.f_saveName,
			f.f_type,
			f.f_path,
			f.f_size,
			f.f_delYn,
			f.f_inTime,
			f.f_delTime
			from
				blog b
				left outer join bFile f
				on b.b_id = f.b_id
			where b.b_id =#{b_id};
	</select>

	<!-- 수정하기 -->
	<update id="updateBlog"  parameterType="com.project.blog.domain.BlogDto">
		update blog set b_title=#{b_title},b_author=#{b_author},b_content=#{b_content},b_show=#{b_show},b_search=#{b_search},b_cate=#{b_cate},b_modDate=now() where b_id=#{b_id}
	</update>

	<!-- 리스트에 보여줄 전체 게시물 후 -->
	<select id="selectCnt" resultType="int" parameterType="com.project.blog.domain.SearchDto">
		select count(*)
		from blog
			where
			delYn='N'
			<include refid="listSearchCondition"></include>
	</select>


	<!-- 검색 조건 -->
	<sql id="listSearchCondition">
	 	<choose>
			<when test="searchCondi != null and searchCondi.equals('all')">
			<!-- 제티 : 괄호하세요 -->
				and (b_title LIKE CONCAT('%',#{searchText},'%')
				or b_author = #{searchText}
				or b_content LIKE CONCAT('%',#{searchText},'%'))
			</when>
		<when test="searchCondi != null and searchCondi.equals('title')">
			and b_title LIKE CONCAT('%',#{searchText},'%')
		</when>
		<when test="searchCondi != null and searchCondi.equals('author')">
			and b_author = #{searchText}
		</when>
		<when test="searchCondi != null and searchCondi.equals('content')">
			and b_content LIKE CONCAT('%',#{searchText},'%')
		</when>
	</choose>
	</sql>



</mapper>